fastcgi_cache_path /var/run/nginx-cache levels=1:2 keys_zone=WORDPRESS:500m inactive=60m;
fastcgi_cache_key "$scheme$request_method$host$request_uri";
fastcgi_cache_use_stale error timeout invalid_header http_500;
server {
	server_name my.domain.com;
	root /var/www/my.domain.com;

	index index.html index.php;

	access_log /var/log/nginx/my.domain.com_access.log;
	error_log  /var/log/nginx/my.domain.com_error.log;

	
        #fastcgi_cache start
        set $no_cache 0;
 
	# POST requests and urls with a query string should always go to PHP
	if ($request_method = POST) {
	        set $no_cache 1;
	}   
	if ($query_string != ""	) {
	        set $no_cache 1;
	}   
 
	# Don't cache uris containing the following segments
	if ($request_uri ~* "(/wp-admin/|/xmlrpc.php|/wp-(app|cron|login|register|mail).php|wp-.*.php|/feed/|index.php|wp-comments-popup.php|wp-links-opml.php|wp-locations.php|sitemap(_index)?.xml|[a-z0-9_-]+-sitemap([0-9]+)?.xml)") {
	        set $no_cache 1;
	}   
 
	# Don't use the cache for logged in users or recent commenters
	if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
	        set $no_cache 1;
	} 

        # Don't allow pages to be rendered in an iframe on external domains.
	add_header X-Frame-Options "SAMEORIGIN";

	# MIME sniffing prevention
	add_header X-Content-Type-Options "nosniff";

	# Enable cross-site scripting filter in supported browsers.
	add_header X-Xss-Protection "1; mode=block";
        gzip on;
	# Prevent access to hidden files
	location ~* /\.(?!well-known\/) {
		deny all;
	}

	# Prevent access to certain file extensions
	location ~\.(ini|log|conf)$ {
		deny all;
	}
        
        location ~ /purge(/.*) {
	      # Uncomment the following two lines to allow purge only from the webserver
		 #allow 127.0.0.1;
		#deny all;
		fastcgi_cache_purge WORDPRESS "$scheme$request_method$host$1";
	} 

        # Enable WordPress Permananent Links
	location / {
		try_files $uri $uri/ /index.php?q=$uri&$args;
            #try_files $uri $uri/ =404;
	}

	location ~ \.php$ {
             fastcgi_split_path_info ^(.+?\.php)(/.*)$;
             if (!-f $document_root$fastcgi_script_name) {
                return 404;
             }
             # This is a robust solution for path info security issue and works with "cgi.fix_pathinfo = 1" in /etc/php.ini (default) 
             include fastcgi.conf;
             #fastcgi_index index.php;
	     fastcgi_intercept_errors on;
	     include snippets/fastcgi-php.conf;
             fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
             fastcgi_cache_bypass $no_cache;
             fastcgi_no_cache $no_cache;
             fastcgi_cache WORDPRESS;
             fastcgi_cache_valid 200 60m;
        }

    listen [::]:443 ssl; # managed by Certbot
    listen 443 ssl http2; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/my.domain.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/my.domain.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


    ssl_trusted_certificate /etc/letsencrypt/live/my.domain.com/chain.pem; # managed by Certbot
    ssl_stapling on; # managed by Certbot
    ssl_stapling_verify on; # managed by Certbot

}
server {
    if ($host = my.domain.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen 80;
    listen [::]:80;
    server_name my.domain.com;
    return 404; # managed by Certbot


}
